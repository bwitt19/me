{"version":3,"sources":["components/Header.js","components/LineBreak.js","components/About.js","components/Footer.js","components/Experience.js","components/Projects.js","App.js","serviceWorker.js","index.js","components/data/itme.jpg"],"names":["Header","id","Jumbotron","fluid","Container","className","Image","src","ProfilePic","roundedCircle","responsive","href","title","Component","LineBreak","About","source","Footer","class","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8PAkCeA,E,uKA5BP,OACI,gCACI,yBAAKC,GAAG,UACJ,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAWC,UAAU,QACjB,kBAACC,EAAA,EAAD,CAAOC,IAAKC,IAAYC,eAAa,EAACN,OAAK,EAACO,YAAU,KAE1D,0CACA,6BACI,uBAAGC,KAAK,4BAA4BC,MAAM,0BAA1C,wBADJ,cAEI,uBAAGD,KAAK,8BAAR,cAIR,kBAACP,EAAA,EAAD,CAAWC,UAAU,OAAOJ,GAAG,UAC3B,6BACI,uBAAGU,KAAK,UAAR,SADJ,cAEI,uBAAGA,KAAK,WAAR,UAFJ,cAGI,uBAAGA,KAAK,eAAR,cAHJ,cAII,uBAAGA,KAAK,aAAR,oB,GArBPE,a,iBCGNC,MAJf,WACI,OAAS,kBAACV,EAAA,EAAD,KAAW,+BCuBTW,E,uKAXP,OACI,yBAAKd,GAAG,SACJ,kBAAC,EAAD,MACA,kBAACG,EAAA,EAAD,CAAWC,UAAU,QACjB,kBAAC,IAAD,CAAeW,OAdrB,8N,GAQMH,aCOLI,GCnBUJ,YCAFA,Y,uKFGf,OACI,4BAAQK,MAAM,UACV,6BACA,kBAACd,EAAA,EAAD,CAAWC,UAAU,aACjB,6BACI,uBAAGM,KAAK,6BAAR,WADJ,cAEI,uBAAGA,KAAK,8BAAR,YAFJ,cAGI,uBAAGA,KAAK,SAAR,gBAEJ,2BAAG,uBAAGA,KAAK,+CAA+CC,MAAM,yBAA7D,qBAAH,sC,GAXCC,cGmBNM,MAXf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.5a0d448e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Container, Image, Jumbotron } from 'react-bootstrap';\nimport ProfilePic from './data/itme.jpg';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header>\n                <div id='header'>\n                    <Jumbotron fluid>\n                        <Container className=\"pb-3\">\n                            <Image src={ProfilePic} roundedCircle fluid responsive />\n                        </Container>\n                        <h1>Blair Witt</h1>\n                        <nav>\n                            <a href=\"mailto:bwitt190@gmail.com\" title=\"go ahead, make my day.\">[bwitt190@gmail.com]</a> &bull;&nbsp;\n                            <a href=\"https://github.com/bwitt19\">[GitHub]</a>\n                        </nav>\n                    </Jumbotron>\n\n                    <Container className=\"my-4\" id=\"navbar\">\n                        <nav>\n                            <a href='#about'>About</a> &bull;&nbsp;\n                            <a href='#resume'>Resume</a> &bull;&nbsp;\n                            <a href='#experience'>Experience</a> &bull;&nbsp;\n                            <a href='#projects'>Projects</a>\n                        </nav>\n                    </Container>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nfunction LineBreak() {\n    return ( <Container><hr /></Container> );\n}\n\nexport default LineBreak;\n","import React, {Component} from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport Container from 'react-bootstrap/Container';\n\nimport LineBreak from './LineBreak';\n\nconst markdown = `\n## about me\n##### (behind the bingus)\n\nI'll fill this in later! But it definitely exists, I'm sure.  \nI might talk about how I'm just some lil new grad that wants to actually have a job and such but yes.\n`;\n\nclass About extends Component {\n    render () {\n        return (\n            <div id='about'>\n                <LineBreak />\n                <Container className=\"my-5\">\n                    <ReactMarkdown source={markdown} />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default About;","import React, {Component} from 'react';\nimport { Container } from 'react-bootstrap';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer class='footer'>\n                <hr/>\n                <Container className=\"pt-2 pb-4\">\n                    <nav>\n                        <a href=\"mailto:bwitt190@gmail.com\">[email]</a> &bull;&nbsp;\n                        <a href=\"https://github.com/bwitt19\">[github]</a> &bull;&nbsp;\n                        <a href=\"#oops\">full resume</a>\n                    </nav>\n                    <p><a href=\"https://github.com/bwitt19/bwitt19.github.io\" title=\"full repository here!\">made from scratch</a> with ReactJS and Bootstrap.</p>\n                </Container>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;","import React, {Component} from 'react';\n\nclass Experience extends Component {}\n\nexport default Experience;","import React, {Component} from 'react';\n\nclass Projects extends Component {}\n\nexport default Projects;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Header from './components/Header';\nimport About from './components/About';\nimport Experience from './components/Experience';\nimport Projects from './components/Projects';\nimport Footer from './components/Footer';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <About />\n      \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/itme.21e8372f.jpg\";"],"sourceRoot":""}